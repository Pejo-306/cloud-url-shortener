"""Redis key schema utility for consistent key naming in Redis DAO operations.

This module provides a lightweight key schema class for generating 
predictable, namespaced Redis keys used by data access objects (DAOs).

Responsibilities:
    - Define consistent key formats Redis keys.
    - Optionally prepend a namespace prefix for environment separation.

Classes:
    RedisKeySchema:
        Provides methods for generating Redis keys for short URL mappings
        (e.g., link targets and hit counters) with optional application-level
        prefixing for namespace isolation.

Functions:
    prefix_key(func):
        Internal decorator used to automatically prepend a configured prefix
        to generated Redis keys.
        NOTE: Do NOT import or use this decorator directly. It's intended only
              for internal use within RedisKeySchema's implementation.

Example:
    >>> keys = RedisKeySchema(prefix="cloudshortener")
    >>> keys.link_url_key("abc123")
    'cloudshortener:links:abc123:url'
    >>> keys.link_hits_key("abc123")
    'cloudshortener:links:abc123:hits'

TODO:
    - Add helper method to automatically generate prefix from config/environment.
"""

from typing import Optional


__all__ = ['RedisKeySchema']  # hide internal decorator prefix_key from imports


def prefix_key(func: callable) -> callable:
    """Decorator that prefixes Redis keys generated by RedisKeySchema methods.

    NOTE: Do NOT import or use this decorator. It's intended only for internal
          use within RedisKeySchema's implementation.

    Args:
        func (callable):
            A RedisKeySchema method that returns a Redis key string.

    Returns:
        callable:
            A wrapped function that prefixes the generated key with the 
            configured prefix (if provided).

    Example:
        >>> class RedisKeySchema:
        ...     @prefix_key
        ...     def link_url_key(self, short_code: str) -> str: 
        ...         return ...  # valid Redis key as string
        ...
        >>> schema = RedisKeySchema(prefix="app")
        >>> schema.link_url_key("xyz789")
        'app:links:xyz789:url'
    """

    def wrapper(self, *args, **kwargs) -> str:
        key = func(self, *args, **kwargs)
        return f"{self.prefix}:{key}" if self.prefix is not None else key

    return wrapper


class RedisKeySchema:
    """Provide standardized Redis keys for storing data models as redis keys.

    An optional prefix can be provided to namespace all generated keys.
    It is highly encouranged to set a custom prefix for each app and environment,
    e.g. "cloudshortener:prod" or "cloudshortener:dev".

    Attributes:
        prefix (Optional[str]):
            Optional string prefix to prepend to all generated keys.

    Methods:
        link_url_key(short_code: str) -> str:
            Generate a Redis key for the original URL via a given short code.

        link_hits_key(short_code: str) -> str:
            Generate a Redis key for number of hits via a given short code.

        counter_key() -> str:
            Generate a Redis key for the global links counter.

    Example:
        >>> schema = RedisKeySchema(prefix="shortener")
        >>> schema.link_url_key("abc123")
        'shortener:links:abc123:url'
        >>> schema.link_hits_key("abc123")
        'shortener:links:abc123:hits'

    TODO:
        - Add helper method to automatically generate prefix from config/environment.
    """

    def __init__(self, prefix: Optional[str] = None):
        """Initialize a RedisKeySchema instance.

        Args:
            prefix (Optional[str]):
                Optional string used as a prefix for all generated keys.

        Raises:
            TypeError:
                If the provided prefix is not a string.
        """
        if prefix is not None and not isinstance(prefix, str):
            raise TypeError(f"Prefix must be of type string (given type: {type(prefix)}).")

        self.prefix = prefix

    @prefix_key
    def link_url_key(self, short_code: str) -> str:
        """Generate a Redis key for the original URL via a given short code.

        Args:
            short_code (str):
                The unique short code identifying the shortened URL.

        Returns:
            str: A Redis key string for the URL mapping.

        Example:
            >>> RedisKeySchema().link_url_key("abc123")
            'links:abc123:url'
        """
        return f"links:{short_code}:url"

    @prefix_key
    def link_hits_key(self, short_code: str) -> str:
        """Generate a Redis key for the hit counter via a given short code.

        Args:
            short_code (str):
                The unique short code identifying the shortened URL.

        Returns:
            str: A Redis key string for the hit counter.

        Example:
            >>> RedisKeySchema().link_hits_key("abc123")
            'links:abc123:hits'
        """
        return f"links:{short_code}:hits"

    @prefix_key
    def counter_key(self) -> str:
        """Generate a Redis key for the global counter.

        Returns:
            str: A Redis key string for the global counter.

        Example:
            >>> RedisKeySchema().counter_key()
            'links:counter'
        """
        return 'links:counter'
